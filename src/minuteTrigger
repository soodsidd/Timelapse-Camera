/*
  Getting the alarm to fire a periodic interrupt on the RV-8803 Real Time Clock
  By: Andy England
  SparkFun Electronics
  Date: 3/2/2020
  License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).

  Feel like supporting our work? Buy a board from SparkFun!
  https://www.sparkfun.com/products/14642

  This example shows how to generate a periodic 1s/1minute interrupt pulse

  Hardware Connections:
    Plug the RTC into the Qwiic port on your microcontroller or on your Qwiic shield/adapter.
    If you are using an adapter cable, here is the wire color scheme: 
    Black=GND, Red=3.3V, Blue=SDA, Yellow=SCL
    Open the serial monitor at 115200 baud
*/

#include <SparkFun_RV8803.h> //Get the library here:http://librarymanager/All#SparkFun_RV-8803
#include <avr/sleep.h>
#include <avr/interrupt.h>

RV8803 rtc;


#define MINUTE_ALARM_ENABLE false
#define HOUR_ALARM_ENABLE false
#define WEEKDAY_ALARM_ENABLE false
#define DATE_ALARM_ENABLE false

const int INT_PIN=2;


void setAlarm(){
  Serial.println(rtc.getInterruptFlag(FLAG_ALARM));
  // delay(1000);
  rtc.disableAllInterrupts();
  rtc.clearInterruptFlag(FLAG_ALARM);
  Serial.println(rtc.getInterruptFlag(FLAG_ALARM));
  rtc.clearAllInterruptFlags();//Clear all flags in case any interrupts have occurred.
  // rtc.setPeriodicTimeUpdateFrequency(TIME_UPDATE_1_SECOND); //Can also use TIME_UPDATE_1_MINUTE (TIME_UPDATE_1_SECOND = false, TIME_UPDATE_1_MINUTE = true)
  rtc.setItemsToMatchForAlarm(MINUTE_ALARM_ENABLE, HOUR_ALARM_ENABLE, WEEKDAY_ALARM_ENABLE, DATE_ALARM_ENABLE); //The alarm interrupt compares the alarm interrupt registers with the current time registers. We must choose which registers we want to compare by setting bits to true or false
  // rtc.enableHardwareInterrupt(ALARM_INTERRUPT); //The update interrupt needs to have the hardware interrupt enabled to function
  rtc.updateTime();
  int minutes=rtc.getMinutes();
  Serial.println("Current minutes: " + String(minutes));



  // Serial.println(minutes);
  int alarmMinute=minutes+1;
  
  if (alarmMinute>=60){
    alarmMinute=60;
  }

  Serial.println(alarmMinute);

  rtc.setAlarmMinutes(alarmMinute);
  rtc.setAlarmHours(0);
  rtc.setAlarmWeekday(MONDAY);
  rtc.enableHardwareInterrupt(ALARM_INTERRUPT);

}

void wakeup(){
  // do nothing
  // digitalWrite(LED_BUILTIN, HIGH);
  // delay(500);
  // digitalWrite(LED_BUILTIN,LOW);
}

void sleepmcu(){
  Serial.println("Sleeping now");
  Serial.println(digitalPinToInterrupt(INT_PIN));
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  attachInterrupt(2, wakeup, LOW);
  sleep_cpu();
  sleep_disable();
  detachInterrupt(2);
  // detachInterrupt(digitalPinToInterrupt(INT_PIN));
}

void setup()
{
  Wire.begin();

  Serial.begin(115200);

  // changed something
  Serial.println("Alarm from RTC Example");

  if (rtc.begin() == false)
  {
    Serial.println("Device not found. Please check wiring. Freezing.");
    while(1);
  }
  Serial.println("RTC online!");
  
  rtc.disableAllInterrupts();
  // rtc.clearAllInterruptFlags();

  pinMode(INT_PIN, INPUT_PULLUP);
  // detachInterrupt(digitalPinToInterrupt(INT_PIN));
  rtc.disableHardwareInterrupt(ALARM_INTERRUPT);
  setAlarm();
  sleepmcu();
}


void loop()
{
  // rtc.enableHardwareInterrupt(ALARM_INTERRUPT);
  Serial.println("Im awake!");

  // rtc.disableAllInterrupts();
  rtc.disableHardwareInterrupt(ALARM_INTERRUPT);
  // rtc.clearInterruptFlag(FLAG_ALARM);


  digitalWrite(LED_BUILTIN, HIGH);
  delay(1000);
  digitalWrite(LED_BUILTIN,LOW);
  setAlarm();
  sleepmcu();

}

